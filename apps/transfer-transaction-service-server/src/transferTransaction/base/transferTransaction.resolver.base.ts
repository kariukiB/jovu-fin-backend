/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TransferTransaction } from "./TransferTransaction";
import { TransferTransactionCountArgs } from "./TransferTransactionCountArgs";
import { TransferTransactionFindManyArgs } from "./TransferTransactionFindManyArgs";
import { TransferTransactionFindUniqueArgs } from "./TransferTransactionFindUniqueArgs";
import { CreateTransferTransactionArgs } from "./CreateTransferTransactionArgs";
import { UpdateTransferTransactionArgs } from "./UpdateTransferTransactionArgs";
import { DeleteTransferTransactionArgs } from "./DeleteTransferTransactionArgs";
import { TransferTransactionService } from "../transferTransaction.service";
@graphql.Resolver(() => TransferTransaction)
export class TransferTransactionResolverBase {
  constructor(protected readonly service: TransferTransactionService) {}

  async _transferTransactionsMeta(
    @graphql.Args() args: TransferTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TransferTransaction])
  async transferTransactions(
    @graphql.Args() args: TransferTransactionFindManyArgs
  ): Promise<TransferTransaction[]> {
    return this.service.transferTransactions(args);
  }

  @graphql.Query(() => TransferTransaction, { nullable: true })
  async transferTransaction(
    @graphql.Args() args: TransferTransactionFindUniqueArgs
  ): Promise<TransferTransaction | null> {
    const result = await this.service.transferTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TransferTransaction)
  async createTransferTransaction(
    @graphql.Args() args: CreateTransferTransactionArgs
  ): Promise<TransferTransaction> {
    return await this.service.createTransferTransaction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TransferTransaction)
  async updateTransferTransaction(
    @graphql.Args() args: UpdateTransferTransactionArgs
  ): Promise<TransferTransaction | null> {
    try {
      return await this.service.updateTransferTransaction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransferTransaction)
  async deleteTransferTransaction(
    @graphql.Args() args: DeleteTransferTransactionArgs
  ): Promise<TransferTransaction | null> {
    try {
      return await this.service.deleteTransferTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
