/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransferTransactionService } from "../transferTransaction.service";
import { TransferTransactionCreateInput } from "./TransferTransactionCreateInput";
import { TransferTransaction } from "./TransferTransaction";
import { TransferTransactionFindManyArgs } from "./TransferTransactionFindManyArgs";
import { TransferTransactionWhereUniqueInput } from "./TransferTransactionWhereUniqueInput";
import { TransferTransactionUpdateInput } from "./TransferTransactionUpdateInput";

export class TransferTransactionControllerBase {
  constructor(protected readonly service: TransferTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransferTransaction })
  async createTransferTransaction(
    @common.Body() data: TransferTransactionCreateInput
  ): Promise<TransferTransaction> {
    return await this.service.createTransferTransaction({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        initiatedAt: true,
        recipientAccount: true,
        status: true,
        transactionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransferTransaction] })
  @ApiNestedQuery(TransferTransactionFindManyArgs)
  async transferTransactions(
    @common.Req() request: Request
  ): Promise<TransferTransaction[]> {
    const args = plainToClass(TransferTransactionFindManyArgs, request.query);
    return this.service.transferTransactions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        initiatedAt: true,
        recipientAccount: true,
        status: true,
        transactionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransferTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transferTransaction(
    @common.Param() params: TransferTransactionWhereUniqueInput
  ): Promise<TransferTransaction | null> {
    const result = await this.service.transferTransaction({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        initiatedAt: true,
        recipientAccount: true,
        status: true,
        transactionId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransferTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransferTransaction(
    @common.Param() params: TransferTransactionWhereUniqueInput,
    @common.Body() data: TransferTransactionUpdateInput
  ): Promise<TransferTransaction | null> {
    try {
      return await this.service.updateTransferTransaction({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          initiatedAt: true,
          recipientAccount: true,
          status: true,
          transactionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransferTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransferTransaction(
    @common.Param() params: TransferTransactionWhereUniqueInput
  ): Promise<TransferTransaction | null> {
    try {
      return await this.service.deleteTransferTransaction({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          initiatedAt: true,
          recipientAccount: true,
          status: true,
          transactionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
