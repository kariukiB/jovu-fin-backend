/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TransferTransaction as PrismaTransferTransaction,
} from "@prisma/client";

export class TransferTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransferTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transferTransaction.count(args);
  }

  async transferTransactions<T extends Prisma.TransferTransactionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransferTransactionFindManyArgs>
  ): Promise<PrismaTransferTransaction[]> {
    return this.prisma.transferTransaction.findMany<Prisma.TransferTransactionFindManyArgs>(
      args
    );
  }
  async transferTransaction<T extends Prisma.TransferTransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransferTransactionFindUniqueArgs>
  ): Promise<PrismaTransferTransaction | null> {
    return this.prisma.transferTransaction.findUnique(args);
  }
  async createTransferTransaction<
    T extends Prisma.TransferTransactionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.TransferTransactionCreateArgs>
  ): Promise<PrismaTransferTransaction> {
    return this.prisma.transferTransaction.create<T>(args);
  }
  async updateTransferTransaction<
    T extends Prisma.TransferTransactionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.TransferTransactionUpdateArgs>
  ): Promise<PrismaTransferTransaction> {
    return this.prisma.transferTransaction.update<T>(args);
  }
  async deleteTransferTransaction<
    T extends Prisma.TransferTransactionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.TransferTransactionDeleteArgs>
  ): Promise<PrismaTransferTransaction> {
    return this.prisma.transferTransaction.delete(args);
  }
}
