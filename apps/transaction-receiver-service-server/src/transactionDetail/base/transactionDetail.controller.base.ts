/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionDetailService } from "../transactionDetail.service";
import { TransactionDetailCreateInput } from "./TransactionDetailCreateInput";
import { TransactionDetail } from "./TransactionDetail";
import { TransactionDetailFindManyArgs } from "./TransactionDetailFindManyArgs";
import { TransactionDetailWhereUniqueInput } from "./TransactionDetailWhereUniqueInput";
import { TransactionDetailUpdateInput } from "./TransactionDetailUpdateInput";

export class TransactionDetailControllerBase {
  constructor(protected readonly service: TransactionDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransactionDetail })
  async createTransactionDetail(
    @common.Body() data: TransactionDetailCreateInput
  ): Promise<TransactionDetail> {
    return await this.service.createTransactionDetail({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        timestamp: true,
        transactionId: true,
        transactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransactionDetail] })
  @ApiNestedQuery(TransactionDetailFindManyArgs)
  async transactionDetails(
    @common.Req() request: Request
  ): Promise<TransactionDetail[]> {
    const args = plainToClass(TransactionDetailFindManyArgs, request.query);
    return this.service.transactionDetails({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        timestamp: true,
        transactionId: true,
        transactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransactionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transactionDetail(
    @common.Param() params: TransactionDetailWhereUniqueInput
  ): Promise<TransactionDetail | null> {
    const result = await this.service.transactionDetail({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        timestamp: true,
        transactionId: true,
        transactionType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransactionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransactionDetail(
    @common.Param() params: TransactionDetailWhereUniqueInput,
    @common.Body() data: TransactionDetailUpdateInput
  ): Promise<TransactionDetail | null> {
    try {
      return await this.service.updateTransactionDetail({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          status: true,
          timestamp: true,
          transactionId: true,
          transactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransactionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransactionDetail(
    @common.Param() params: TransactionDetailWhereUniqueInput
  ): Promise<TransactionDetail | null> {
    try {
      return await this.service.deleteTransactionDetail({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          status: true,
          timestamp: true,
          transactionId: true,
          transactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
